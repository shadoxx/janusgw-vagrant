#!/bin/bash

compile_websockets_lib() {
  if [ ! -d "/vagrant/cache/libwebsockets" ]; then
    echo -e "\n[*] Cloning the libwebsockets repository"
    git clone -q --depth 1 -b v2.4.2 https://github.com/warmcat/libwebsockets.git /vagrant/cache/libwebsockets
  fi

  # Clone from cache filesystem to vm filesystem to workaround problems with
  # Windows and symlinks within VMs.
  git clone /vagrant/cache/libwebsockets/ /home/vagrant/libwebsockets
  mkdir /home/vagrant/libwebsockets/build

  cd /home/vagrant/libwebsockets/build

  echo -e "\n[*] Building libwebsockets..."
  cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_C_FLAGS="-fpic" ..
  make

  echo -e "\n[*] Installing libwebsockets shared lib to /usr"
  make install
}

compile_usrsctp_lib() {
  if [ ! -d "/vagrant/cache/usrsctp" ]; then
    echo -e "\n[*] Cloning the usrsctp repository for Data Channel support"
    git clone -q https://github.com/sctplab/usrsctp /vagrant/cache/usrsctp
  fi

  git clone /vagrant/cache/usrsctp/ /home/vagrant/usrsctp
  cd /home/vagrant/usrsctp

  echo -e "\n[*] Bootstrapping and configuring usrsctp"
  ./bootstrap
  ./configure --prefix=/usr

  echo -e "\n[*] Building usrsctp..."
  make

  echo -e "\n[*] Installing usrsctp shared lib to /usr"
  make install
}


compile_janus_server() {
  if [ ! -d "/vagrant/cache/janus-gateway" ]; then
    echo -e "\n[*] Cloning the janus-gateway repository"
    git clone -q https://github.com/meetecho/janus-gateway.git /vagrant/cache/janus-gateway
  fi

  git clone /vagrant/cache/janus-gateway/ /home/vagrant/janus-gateway
  cd /home/vagrant/janus-gateway

  chown -R vagrant:vagrant /home/vagrant

  sh autogen.sh
  ./configure --datarootdir=/usr --exec-prefix=/usr --prefix=/ --enable-post-processing --enable-all-js-modules --disable-rabbitmq --disable-mqtt

  echo -e "\n[*] Building janus-gateway executeable and plugins..."
  make -j$(nproc)

  echo -e "\n[*] Installing to local system"
  make install

  echo -e "\n[*] Generating fresh configuration files"
  make configs

  echo -e "\n[*] Installing custom configuration files to /etc/janus"
  for file in $(ls -1 "/vagrant/provision/conf/janus"); do
    install -v -m 640 /vagrant/provision/conf/janus/$file /etc/janus
  done

}

install_janus_service() {
  echo -e "\n[*] Installing, enabling, and starting the janus service via systemd"
  install -v -m 644 /vagrant/provision/conf/systemd/janus.service /lib/systemd/system
  systemctl daemon-reload
  systemctl enable janus
}

install_coturn_service() {
  echo -e "\n[*] Installing configuration files for coturn and enabling"
  install -v -m 640 -o turnserver -g turnserver \
    /vagrant/provision/conf/coturn/turnserver.conf /etc/turnserver.conf

  # Enable autostart of coturn service
  echo "TURNSERVER_ENABLED=1" > /etc/default/coturn

  systemctl enable coturn
}

configure_nginx() {
  echo -e "\n[*] Applying nginx configuration and restarting webserver..."
  install -v -m 644 /vagrant/provision/conf/nginx/nginx.conf /etc/nginx/nginx.conf
  install -v -m 644 /vagrant/provision/conf/nginx/default /etc/nginx/sites-enabled/default
  systemctl enable nginx
  systemctl restart nginx
}

generate_ssl_certificate() {
  local CERT_PATH=/vagrant/cache/ssl/certificate.pem
  local KEY_PATH=/vagrant/cache/ssl/privatekey.pem

  if [ ! -d "/vagrant/cache/ssl" ]; then
    echo -e "\n[*] Running first time generation of X509 certificate for localhost"
    mkdir -p /vagrant/cache/ssl
    openssl req -x509 -out $CERT_PATH -keyout $KEY_PATH \
      -newkey rsa:2048 -nodes -sha256 \
      -subj '/CN=localhost' -extensions EXT -config <( \
      printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
  fi
}

apply_patch_a() {
  echo -e "\n[*] PATCH A: creating a symlink from /etc/janus to /usr/local/etc/janus"
  ln -vs /etc/janus /usr/local/etc/janus
  systemctl start janus
}

apply_patch_b() {
  echo -e "\n[*] PATCH B: copying the contents of /share/janus/demos to Nginx webroot"
  cp -vr /vagrant/cache/janus-gateway/html/* /var/www/html
  cp -vr /vagrant/provision/html/* /var/www/html
}

install_nodejs() {
  echo -e "\n[*] PATCH C: installing nodejs and npm"
  snap install node --classic --channel 8/stable
}

echo -e "\n"
echo -e "=============================================================================="
echo -e " janus-server autocompiler                                                    "
echo -e "=============================================================================="

install_nodejs
compile_websockets_lib
compile_usrsctp_lib
compile_janus_server
generate_ssl_certificate
install_janus_service
install_coturn_service
configure_nginx

apply_patch_a
apply_patch_b

systemctl restart coturn
